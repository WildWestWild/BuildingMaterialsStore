using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using BuildingMaterialsStore.Data;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using BuildingMaterialsStore.Models;
using BuildingMaterialsStore.Models.ViewModel;
using BuildingMaterialsStore.Utilities;
using Microsoft.EntityFrameworkCore;
using SqlParam = Microsoft.Data.SqlClient.SqlParameter;

namespace BuildingMaterialsStore.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;
        private readonly ApplicationDBContext _db;

        public HomeController(ILogger<HomeController> logger, ApplicationDBContext db)
        {
            _logger = logger;
            _db = db;
        }

        public IActionResult Index()
        {
            HomeVM homeVm = new HomeVM
            {
                Products = _db.Product.Include(u=>u.Category).Include(u=> u.ApplicationType),
                Categories = _db.Category
            };
            CallFunctionsBySQL("test");
            return View(homeVm);
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }

        
        public IActionResult Details(int id)
        {
            var detailsVm = new DetailsVM
            {
                Product = _db.Product
                    .Include(u => u.Category)
                    .Include(u => u.ApplicationType)
                    .FirstOrDefault(u=> u.Id == id),
                ExistsInCart = false
            };
            if (GetShoppingCartsLists().SingleOrDefault(u=>u.ProductId == id) != null)
            {
                detailsVm.ExistsInCart = true;
            }
            return View(detailsVm);
        }
        
        [HttpPost, ActionName("Details")]
        public IActionResult DetailsPost(int id)
        {
            var shoppingCartsLists = GetShoppingCartsLists();
            shoppingCartsLists.Add(new ShoppingCart
            {
                ProductId = id
            });
            HttpContext.Session.Set(WC.SessionCart,shoppingCartsLists);
            return RedirectToAction(nameof(Index));
        }
        
        [HttpPost]
        public IActionResult RemoveFromCard(int id)
        {
            var shoppingCartsLists = GetShoppingCartsLists();

            var itemToRemove = shoppingCartsLists
                .SingleOrDefault(c=>c.ProductId == id);
            if (itemToRemove != null)
                shoppingCartsLists.Remove(itemToRemove);
            
            HttpContext.Session.Set(WC.SessionCart,shoppingCartsLists);
            return RedirectToAction("Index");
        }

        private List<ShoppingCart> GetShoppingCartsLists()
        {
            List<ShoppingCart> shoppingCartsLists;
            var shoppingListChecker = HttpContext.Session.Get<IEnumerable<ShoppingCart>>(WC.SessionCart);
            if (shoppingListChecker != null && shoppingListChecker.Any())
            {
                shoppingCartsLists = HttpContext.Session.Get<List<ShoppingCart>>(WC.SessionCart);
            }
            else
            {
                shoppingCartsLists = new List<ShoppingCart>();
            }

            return shoppingCartsLists;
        }

        private void CallFunctionsBySQL(string name)
        {
            SqlParam paramName = new SqlParam("@name", name);

            var categoryRows = _db.Category.FromSqlRaw("select * FROM dbo.CategoryRowsFunc(@name)", paramName);

            var countData = 2;

            SqlParam paramCount = new SqlParam("@count", countData);

            //var countNewAutogeneratedStrings = _db.Product.FromSqlRaw("CreateMoreData @count", paramCount).ToList();

            foreach (var row in categoryRows)
            { 
                Console.WriteLine($"{row.Id}, {row.Name}, {row.DisplayOrder}");
            }
        }
        
    }
}
